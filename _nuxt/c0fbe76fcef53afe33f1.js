(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{241:function(e,o){const r={render:function(){this.$createElement;return this._self._c,this._m(0)},staticRenderFns:[function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("div",{staticClass:"frontmatter-markdown"},[r("p",[e._v("Este es un tema que me apasiona y que me parece "),r("strong",[e._v("necesario que esté en cada desarrollo")]),e._v(" que hago, pero creo que a veces no se le da la importancia ni el lugar que merece cuando estamos arrancando en el mundo de la programación.")]),e._v(" "),r("p",[e._v("Nosotros, los creadores de software somos personas, y como tales es muy probable que nos podamos equivocar en la implementación, olvidarnos, malinterpretar u obviar algún requerimiento o requisito del sistema, etc.")]),e._v(" "),r("p",[e._v("Algo seguro en un sistema es que vamos a equivocarnos pero "),r("strong",[e._v("hacer las pruebas correspondientes (testear) puede encontrar estas cosas antes de que esos errores o malentendidos lleguen a producción")]),e._v(" (que lo vea el usuario final del software).")]),e._v(" "),r("h1",[e._v("¿ Qué significa testear un sistema de software ?.")]),e._v(" "),r("p",[e._v("Es la actividad por la cual "),r("strong",[e._v("verificamos que nuestro sistema o alguna parte funciona como esperamos")]),e._v(".")]),e._v(" "),r("p",[e._v("La gran parte de las personas que desarrollamos empezamos haciendo el famoso 'Hello World', por ejemplo en JavaScript nuestro programa sería algo así:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-js"}},[e._v("console.log('Hello World')\n")])]),e._v(" "),r("p",[e._v("Y luego de escribirlo veríamos si en nuestra consola aparece ‘Hello World’, eso que hicimos ahí es testear, el hecho de fijarnos si por nuestra consola aparece lo que esperamos y verificar es una especie de test, ya que a través de esa acción estamos verificando que nuestro sistema funcione como queremos y esperamos que funcione.")]),e._v(" "),r("p",[e._v("Otro ejemplo, supongamos que nuestra aplicación es una tienda online, sería probar que nuestro carrito de compras pueda ser llenado con productos.\nEntonces lo que haríamos para verificar esto sería agregar algún producto a nuestro carrito y ver que se haya agregado.")]),e._v(" "),r("p",[e._v("Esta forma de testear es manual y es la más común, natural e intuitiva de probar en un principio.")]),e._v(" "),r("h1",[e._v("Casos de prueba.")]),e._v(" "),r("p",[e._v("El ejemplo anterior del carrito es lo que llamamos un típico caso de prueba.")]),e._v(" "),r("p",[e._v("Un caso de prueba consiste en una serie de "),r("strong",[e._v("pasos y/o acciones que nuestro sistema tiene que hacer y al finalizarlos podemos verificar el funcionamiento")]),e._v(" que esperamos contra el estado de nuestro sistema.")]),e._v(" "),r("p",[e._v("Dicho esto los casos de prueba tienen "),r("strong",[e._v("tres etapas")]),e._v(":")]),e._v(" "),r("ul",[r("li",[r("p",[r("strong",[e._v("Pre-condiciones")]),e._v(": Nos indica cómo tiene que estar nuestro sistema o qué cosas tienen que pasar antes de realizar los pasos de nuestra prueba. Por ejemplo, en el ejemplo del carrito, una pre condición seria que nuestro sistema debe tener productos creados y que se puedan elegir, ya que si no tenemos nada de eso no podriamos agregar nada al carrito.")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("Ejecución")]),e._v(": Aquí definimos los pasos que tenemos que realizar hasta llegar al estado que queremos verificar. En el ejemplo del carrito sería, abrir la aplicación, elegir un producto para agregar y luego ir a la pantalla del carrito.")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("Verificación (post condiciones)")]),e._v(": Y por último tenemos el paso en el cuál vamos a verificar el estado de nuestro sistema, los valores devueltos, etc contra lo que esperábamos. En el ejemplo anterior seria ver que en el carrito haya un solo producto, también podríamos verificar que el producto sea el que elegimos por ejemplo, o podemos optar por tener dos casos de prueba separados.")])])]),e._v(" "),r("h1",[e._v("Pruebas automatizadas.")]),e._v(" "),r("p",[e._v("Viendo lo anterior podemos notar que en cuanto nuestro sistema crezca vamos a tener muchos casos de prueba y testear manualmente se hace un proceso tedioso, complicado y se vuelve algo costoso en términos de tiempo y cantidad de personas que se necesita para llevarlas a cabo.")]),e._v(" "),r("p",[e._v("Por lo que automatizar estas pruebas es la "),r("strong",[e._v("forma más sustentable para probar nuestro sistema")]),e._v(".")]),e._v(" "),r("p",[e._v("Otro término que se utiliza es "),r("strong",[e._v("“código auto testeable” o “self testing code” que es cuando podemos probar y verificar una serie de casos de prueba escritos en código corriendo un solo comando")]),e._v(" o apretando un botón.")]),e._v(" "),r("h1",[e._v("Beneficios de las pruebas automatizadas.")]),e._v(" "),r("p",[e._v("Existen varios beneficios, algunos de ellos se pueden deducir de la sección anterior, como la reducción de la complejidad del proceso y el tiempo que se necesita para ejecutar las pruebas.")]),e._v(" "),r("p",[e._v("Cómo nuestras pruebas están escritas en código y normalmente viven junto a nuestro sistema, los cambios que se produzcan en nuestro código o en nuestros tests van a ser detectados rápidamente y nuestros tests dejarán de estar en un estado verificado (a veces llamado que los tests están pasando o que están en estado verde) y pasarán a estar en estado de error (a veces llamado en estado rojo).")]),e._v(" "),r("p",[e._v("Además nuestros tests sirven de "),r("strong",[e._v("documentación actualizada")]),e._v(", ya que estos indican cómo debería funcionar nuestro sistema acorde a las especificaciones actuales.")]),e._v(" "),r("p",[e._v("Podemos realizar cambios en nuestro sistema para "),r("strong",[e._v("mejorar la calidad")]),e._v(" de nuestro código teniendo la seguridad de que nuestro sistema sigue funcionando correctamente (a este proceso se lo conoce como refactoring).")]),e._v(" "),r("blockquote",[r("p",[e._v("Nuestro sistema se vuelve más "),r("strong",[e._v("robusto y confiable")]),e._v(" ya que estamos verificando constantemente que el comportamiento sea consistente y si encontramos algún error o inconsistencia podemos volver a un estado consistente anterior.")])]),e._v(" "),r("p",[e._v("Hace que nuestro sistema tenga un "),r("strong",[e._v("crecimiento sostenible")]),e._v(", por lo general en los proyectos de software que no tienen test, en un principio puede parecer que progresan, crecen y entregan features rápido. Pero en cuanto el proyecto y los requerimientos crecen y cambian, todo este progreso y rapidez empieza a disminuir. Cuando tenemos una cultura de testing desde el principio, puede que nuestro proyecto tarde un poco más en tener ritmo, pero cuando llega a ese ritmo, su progreso y crecimiento va a ser constante y seguro.")]),e._v(" "),r("p",[e._v("Estos son solo algunos de los beneficios, igualmente cabe mencionar que a pesar de que tengamos una gran cantidad de casos de prueba verificados puede ocurrir (más bien va a ocurrir) que tengamos algún error o bug de algún caso que no tuvimos en cuenta. Lo interesante de esto es que probablemente vamos a poder encontrar rápidamente por qué se originó ese error y poder agregar un nuevo test para verificar que no vuelva a ocurrir.")])])}]};e.exports={attributes:{title:"Introducción al software testing.",image:"background.jpg"},meta:{resourcePath:"/home/fack/Documentos/Proyectos/personal-website/articles/intro-to-software-testing.md"},vue:{component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=r.render,this.$options.staticRenderFns=r.staticRenderFns}}}}}}]);